apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: hudur-system
  labels:
    app: logstash
    component: processor
spec:
  replicas: 2
  selector:
    matchLabels:
      app: logstash
      component: processor
  template:
    metadata:
      labels:
        app: logstash
        component: processor
    spec:
      serviceAccountName: logstash
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:8.11.0
        ports:
        - containerPort: 5044
          name: beats
        - containerPort: 9600
          name: http
        env:
        - name: LS_JAVA_OPTS
          value: "-Xmx2g -Xms2g"
        - name: ELASTICSEARCH_HOSTS
          value: "https://elasticsearch-client:9200"
        - name: ELASTICSEARCH_USERNAME
          value: "logstash_system"
        - name: ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elasticsearch-secrets
              key: elastic-password
        volumeMounts:
        - name: logstash-config
          mountPath: /usr/share/logstash/pipeline
        - name: logstash-settings
          mountPath: /usr/share/logstash/config
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /
            port: 9600
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 9600
          initialDelaySeconds: 30
          periodSeconds: 5
      volumes:
      - name: logstash-config
        configMap:
          name: logstash-config
      - name: logstash-settings
        configMap:
          name: logstash-settings
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: hudur-system
data:
  logstash.conf: |
    input {
      beats {
        port => 5044
      }
      http {
        port => 8080
        codec => json
      }
    }

    filter {
      if [fields][service] {
        mutate {
          add_field => { "service_name" => "%{[fields][service]}" }
        }
      }

      if [kubernetes] {
        mutate {
          add_field => { "k8s_namespace" => "%{[kubernetes][namespace]}" }
          add_field => { "k8s_pod" => "%{[kubernetes][pod][name]}" }
          add_field => { "k8s_container" => "%{[kubernetes][container][name]}" }
        }
      }

      if [message] =~ /^\{.*\}$/ {
        json {
          source => "message"
        }
      }

      if [fields][service] =~ /attendance|auth|face|leave|user|tenant|notification|webhook/ {
        grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:level}\] %{GREEDYDATA:log_message}" }
        }
      }

      mutate {
        add_field => { "environment" => "production" }
        add_field => { "platform" => "hudur-attendancepro" }
      }

      if [log_message] =~ /attendance|check-in|check-out/ {
        mutate {
          add_tag => [ "attendance-event" ]
        }
      }

      if [log_message] =~ /login|logout|authentication|authorization/ {
        mutate {
          add_tag => [ "security-event" ]
        }
      }

      if [level] == "ERROR" or [level] == "FATAL" {
        mutate {
          add_tag => [ "error-event" ]
        }
      }
    }

    output {
      elasticsearch {
        hosts => ["https://elasticsearch-client:9200"]
        user => "logstash_system"
        password => "${ELASTICSEARCH_PASSWORD}"
        ssl => true
        ssl_certificate_verification => false
        index => "hudur-logs-%{+YYYY.MM.dd}"
        template_name => "hudur-logs"
        template => "/usr/share/logstash/templates/hudur-template.json"
        template_overwrite => true
      }

      stdout {
        codec => rubydebug
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-settings
  namespace: hudur-system
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
    path.logs: /usr/share/logstash/logs
    xpack.monitoring.enabled: true
    xpack.monitoring.elasticsearch.hosts: ["https://elasticsearch-client:9200"]
    xpack.monitoring.elasticsearch.username: "logstash_system"
    xpack.monitoring.elasticsearch.password: "${ELASTICSEARCH_PASSWORD}"
    xpack.monitoring.elasticsearch.ssl.verification_mode: none
  hudur-template.json: |
    {
      "index_patterns": ["hudur-logs-*"],
      "settings": {
        "number_of_shards": 2,
        "number_of_replicas": 1,
        "index.refresh_interval": "30s"
      },
      "mappings": {
        "properties": {
          "@timestamp": { "type": "date" },
          "service_name": { "type": "keyword" },
          "level": { "type": "keyword" },
          "message": { "type": "text" },
          "k8s_namespace": { "type": "keyword" },
          "k8s_pod": { "type": "keyword" },
          "k8s_container": { "type": "keyword" },
          "environment": { "type": "keyword" },
          "platform": { "type": "keyword" }
        }
      }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: hudur-system
  labels:
    app: logstash
    component: processor
spec:
  type: ClusterIP
  ports:
  - port: 5044
    targetPort: 5044
    name: beats
  - port: 8080
    targetPort: 8080
    name: http
  - port: 9600
    targetPort: 9600
    name: api
  selector:
    app: logstash
    component: processor
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: logstash
  namespace: hudur-system
