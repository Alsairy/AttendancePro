apiVersion: v1
kind: Namespace
metadata:
  name: argocd
  labels:
    name: argocd
    app.kubernetes.io/name: argocd
    app.kubernetes.io/part-of: hudur-platform
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cmd-params-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-cmd-params-cm
    app.kubernetes.io/part-of: argocd
data:
  server.insecure: "false"
  server.enable.proxy.extension: "true"
  application.instanceLabelKey: argocd.argoproj.io/instance
  server.repo.server.timeout.seconds: "300"
  controller.operation.processors: "20"
  controller.status.processors: "20"
  controller.self.heal.timeout.seconds: "5"
  controller.repo.server.timeout.seconds: "300"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-server-config
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-server-config
    app.kubernetes.io/part-of: argocd
data:
  url: https://argocd.hudur.sa
  application.instanceLabelKey: argocd.argoproj.io/instance
  oidc.config: |
    name: Azure AD
    issuer: https://login.microsoftonline.com/TENANT_ID/v2.0
    clientId: CLIENT_ID
    clientSecret: $oidc.azure.clientSecret
    requestedScopes: ["openid", "profile", "email", "groups"]
    requestedIDTokenClaims: {"groups": {"essential": true}}
  policy.default: role:readonly
  policy.csv: |
    p, role:admin, applications, *, */*, allow
    p, role:admin, clusters, *, *, allow
    p, role:admin, repositories, *, *, allow
    p, role:admin, certificates, *, *, allow
    p, role:admin, accounts, *, *, allow
    p, role:admin, gpgkeys, *, *, allow
    p, role:admin, logs, *, *, allow
    p, role:admin, exec, *, *, allow
    
    p, role:developer, applications, get, */*, allow
    p, role:developer, applications, sync, */*, allow
    p, role:developer, applications, action/*, */*, allow
    p, role:developer, logs, get, */*, allow
    p, role:developer, repositories, get, *, allow
    p, role:developer, clusters, get, *, allow
    
    g, hudur:platform-admins, role:admin
    g, hudur:developers, role:developer
  scopes: '[groups]'
---
apiVersion: v1
kind: Secret
metadata:
  name: argocd-secret
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-secret
    app.kubernetes.io/part-of: argocd
type: Opaque
data:
  admin.password: $2a$10$rRyBsGSHK6.uc8fntPwVIuLiTleHI3c4f7A2d9VuoVb5xJbQADg.G  # changeme
  admin.passwordMtime: MjAyNS0wNi0yN1QwMzowMDowMFo=
  server.secretkey: Y2hhbmdlbWUtc2VjcmV0LWtleQ==
  oidc.azure.clientSecret: Y2hhbmdlbWUtb2lkYy1zZWNyZXQ=
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-server-ingress
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-server-ingress
    app.kubernetes.io/part-of: argocd
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/server-snippet: |
      grpc_read_timeout 300;
      grpc_send_timeout 300;
      client_body_timeout 60;
      client_header_timeout 60;
      client_max_body_size 1m;
spec:
  tls:
    - hosts:
        - argocd.hudur.sa
      secretName: argocd-server-tls
  rules:
    - host: argocd.hudur.sa
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: argocd-server
                port:
                  number: 443
