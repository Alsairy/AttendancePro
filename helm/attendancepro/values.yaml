# Default values for attendancepro
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Image configuration
image:
  registry: docker.io
  repository: attendancepro
  tag: "1.0.0"
  pullPolicy: IfNotPresent

# Service configuration
services:
  apiGateway:
    enabled: true
    replicaCount: 2
    image:
      repository: attendancepro/api-gateway
    service:
      type: LoadBalancer
      port: 80
      targetPort: 80
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 10
      targetCPUUtilizationPercentage: 70

  authentication:
    enabled: true
    replicaCount: 2
    image:
      repository: attendancepro/authentication-service
    service:
      type: ClusterIP
      port: 80
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  attendance:
    enabled: true
    replicaCount: 3
    image:
      repository: attendancepro/attendance-service
    service:
      type: ClusterIP
      port: 80
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    autoscaling:
      enabled: true
      minReplicas: 3
      maxReplicas: 15
      targetCPUUtilizationPercentage: 70

  faceRecognition:
    enabled: true
    replicaCount: 2
    image:
      repository: attendancepro/face-recognition-service
    service:
      type: ClusterIP
      port: 80
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "1Gi"
        cpu: "1000m"
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 8
      targetCPUUtilizationPercentage: 60

  leaveManagement:
    enabled: true
    replicaCount: 2
    image:
      repository: attendancepro/leave-management-service
    service:
      type: ClusterIP
      port: 80
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  notifications:
    enabled: true
    replicaCount: 2
    image:
      repository: attendancepro/notifications-service
    service:
      type: ClusterIP
      port: 80
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  webhooks:
    enabled: true
    replicaCount: 2
    image:
      repository: attendancepro/webhooks-service
    service:
      type: ClusterIP
      port: 80
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  integrations:
    enabled: true
    replicaCount: 2
    image:
      repository: attendancepro/integrations-service
    service:
      type: ClusterIP
      port: 80
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  frontend:
    enabled: true
    replicaCount: 3
    image:
      repository: attendancepro/frontend
    service:
      type: LoadBalancer
      port: 80
    resources:
      requests:
        memory: "128Mi"
        cpu: "50m"
      limits:
        memory: "256Mi"
        cpu: "200m"
    autoscaling:
      enabled: true
      minReplicas: 3
      maxReplicas: 12
      targetCPUUtilizationPercentage: 70

# Database configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "${DB_PASSWORD}"
    database: "AttendancePlatform"
  primary:
    persistence:
      enabled: true
      size: 20Gi
    resources:
      requests:
        memory: "2Gi"
        cpu: "500m"
      limits:
        memory: "4Gi"
        cpu: "2000m"

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 5Gi
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"

# Configuration
config:
  jwt:
    key: "${JWT_SECRET_KEY}"
    issuer: "AttendancePlatform"
    audience: "AttendancePlatformUsers"
    expiryMinutes: 60
  
  email:
    smtpServer: "smtp.gmail.com"
    smtpPort: 587
    enableSsl: true
    fromEmail: "noreply@attendancepro.com"
    fromName: "AttendancePro"
  
  sms:
    provider: "Twilio"
  
  pushNotifications:
    firebase:
      enabled: true
    apple:
      enabled: true

# Security
security:
  networkPolicy:
    enabled: true
  podSecurityPolicy:
    enabled: true
  rbac:
    enabled: true

# Monitoring
monitoring:
  enabled: true
  prometheus:
    enabled: true
    retention: "15d"
    storage: "50Gi"
  grafana:
    enabled: true
    adminPassword: "${GRAFANA_ADMIN_PASSWORD}"
    storage: "10Gi"
  alertmanager:
    enabled: true
    storage: "5Gi"

# Ingress
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: api.attendancepro.com
      paths:
        - path: /
          pathType: Prefix
          service: api-gateway
    - host: app.attendancepro.com
      paths:
        - path: /
          pathType: Prefix
          service: frontend
  tls:
    - secretName: attendancepro-tls
      hosts:
        - api.attendancepro.com
        - app.attendancepro.com

# Resource quotas
resourceQuota:
  enabled: true
  hard:
    requests.cpu: "10"
    requests.memory: "20Gi"
    limits.cpu: "20"
    limits.memory: "40Gi"
    persistentvolumeclaims: "10"
    pods: "50"
    services: "20"

# Node affinity and tolerations
nodeSelector: {}
tolerations: []
affinity: {}

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

